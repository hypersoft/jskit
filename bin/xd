#!/bin/bash

## Compound Shell Script
##
## build-date: Sun Nov  4 01:28:39 CST 2018
## build-timestamp: 1541316519

##: start of file: sources/bash/source/libraries.d/opkit.sh
##
# opkit gives you 9 parameter triggers.

function opkit.match() {
  local match="$1"; shift;
  for param; do [[ "$match" == "$param" ]] && return 0; done;
  return 1;
}

function opkit.keys() { eval echo \${!$1[@]}\;; }

function opkit.set() {
  local destination=$1 source; shift;
  for source; do
    local key="${source/=*/}";
    local value="${source/*=/}"
    printf -v ${destination}$key %s "$value"
  done;
}

function opkit.get() {
  local source=$1 name; shift;
  for name; do eval echo \"\${$source[$name]}\"\;; done;
}

function opkit.content() { eval echo \${$1[@]}; }

function opkit.begin() { opkit.set $1 [POINT]=1 [SUBPOINT]=0; }

function opkit.dump() { 

  local name;
  for name in $(opkit.keys $1); do
    printf '%s: %s\n' $name "$(opkit.get $1 $name)";
  done

}

function opkit.parse() {

  # PARAMETERS: $1 and $2 are names of associative arrays.
  # the output of the function will be placed in $2
  # the state of the parsing is saved in $1.

  # the remaining parameters are parsed. the number of items parsed are
  # returned in 2[SIZE].

  local OK_STATE=$1 RCRD_PARAMETER=$2; shift 2;

  local POINT=$OK_STATE[POINT] SUBPOINT=$OK_STATE[SUBPOINT];
  local PARAMETER=BASH_REMATCH[1] VALUE=BASH_REMATCH[2]
    
  opkit.set $RCRD_PARAMETER [BRANCH]=0 [POINT]=${!POINT} \
    [INPUT]="$1" [SUBPOINT]=0 [VALUE]='' [SHORT]=0 [SIZE]=1;

  # 1 test for long option
  [[ "$1" =~ ^--([a-zA-Z-]*[a-zA-Z])$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=1 [PARAMETER]="${!PARAMETER}";
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE LONG) || return 11;
    let $POINT++;
    return 0;
  }

  # 2 test for long option with setting specification
  [[ "$1" =~ ^--([a-zA-Z-]*[a-zA-Z]):$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=2 [PARAMETER]="${!PARAMETER}" \
      [VALUE]="$2" [SIZE]=2;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE LONG) || return 21;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SETTINGS) || \
      return 22;
    let $POINT+=2;
    return 0;
  }

  # 3 test for long option with setting specification and data
  [[ "$1" =~ ^--([a-zA-Z-]*[a-zA-Z])[:=](.*)$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=3 [PARAMETER]="${!PARAMETER}" \
      [VALUE]="${!VALUE}";
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE LONG) || return 31;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SETTINGS) || \
      return 32;
    let $POINT++;
    return 0;
  }

  # 4 test for short option
  [[ "$1" =~ ^-([a-zA-Z])$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=4 [PARAMETER]="${!PARAMETER}" \
      [SHORT]=1;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SHORT) || return 41;
    let $POINT++;
    return 0;
  }

  # 5 test for short option with setting
  [[ "$1" =~ ^-([a-zA-Z]):$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=5 [PARAMETER]="${!PARAMETER}" \
      [VALUE]="$2" [SHORT]=1 [SIZE]=2;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SHORT) || return 51;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SETTINGS) || \
      return 52;
    let $POINT+=2;
    return 0;
  }

  # 6 test for short option with setting and data
  [[ "$1" =~ ^-([a-zA-Z])[:=](.+)$ ]] && {
    opkit.set $RCRD_PARAMETER [BRANCH]=6 [PARAMETER]="${!PARAMETER}" \
      [VALUE]="${!VALUE}" [SHORT]=1;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SHORT) || return 61;
    opkit.match "${!PARAMETER}" $(opkit.get $OK_STATE SETTINGS) || \
      return 62;
    let $POINT++;
    return 0;
  }
  
  # 7 test for multiple short option
  [[ "$1" =~ ^-([a-zA-Z]+)$ ]] && {
    local match=${BASH_REMATCH[1]};
    local -i length=${#match};
    local C=${match:${!SUBPOINT}:1};
    opkit.set $RCRD_PARAMETER [BRANCH]=7 [PARAMETER]="$C" [POINT]=${!POINT} \
      [SUBPOINT]=${!SUBPOINT} [SHORT]=1;
    opkit.match "${C}" $(opkit.get $OK_STATE SHORT) || return 71;
    let $SUBPOINT++;
    if (( $SUBPOINT == length )); then
      opkit.set $RCRD_PARAMETER [SIZE]=1;
      let $POINT++ $SUBPOINT=0;
    else
      opkit.set $RCRD_PARAMETER [SIZE]=0;
      opkit.match "${C}" $(opkit.get $OK_STATE SETTINGS) && {
        opkit.match "$C" $(opkit.get $OK_STATE HAS_DEFAULT) || return 72;
      } 
    fi;
    return 0;
  }

  # 8 test for multiple short option with setting
  [[ "$1" =~ ^-([a-zA-Z]+):$ ]] && {
    local match=${BASH_REMATCH[1]};
    local -i length=${#match};
    local C=${match:${!SUBPOINT}:1};
    opkit.set $RCRD_PARAMETER [BRANCH]=8 [PARAMETER]="$C" [POINT]=${!POINT} \
      [SUBPOINT]=${!SUBPOINT} [SHORT]=1;
    opkit.match "${C}" $(opkit.get $OK_STATE SHORT) || return 81;
    let $SUBPOINT++;
    if (( $SUBPOINT == length )); then
      opkit.set $RCRD_PARAMETER [VALUE]="$2";
      opkit.set $RCRD_PARAMETER [SIZE]=2;
      opkit.match "${C}" $(opkit.get $OK_STATE SETTINGS) && {
        opkit.set $RCRD_PARAMETER [VALUE]="$2" [SIZE]=2;
        let $POINT++;
      } 
      let $POINT++ $SUBPOINT=0;
    else
      opkit.set $RCRD_PARAMETER [SIZE]=0;
      opkit.match "${C}" $(opkit.get $OK_STATE SETTINGS) && {
        opkit.match "$C" $(opkit.get $OK_STATE HAS_DEFAULT) || return 82;
      } 
    fi;
    return 0;
  }

  # 9 test for multiple short option with setting and data
  [[ "$1" =~ ^-([a-zA-Z]+)[:=](.+)$ ]] && {
    local match=${BASH_REMATCH[1]};
    local -i length=${#match};
    local C=${match:${!SUBPOINT}:1};
    opkit.set $RCRD_PARAMETER [BRANCH]=9 [PARAMETER]="$C" [POINT]=${!POINT} \
      [SUBPOINT]=${!SUBPOINT} [SHORT]=1;
    opkit.match "${C}" $(opkit.get $OK_STATE SHORT) || return 91;
    let $SUBPOINT++;
    if (( $SUBPOINT == length )); then
      opkit.set $RCRD_PARAMETER [VALUE]="${BASH_REMATCH[2]}";
      opkit.set $RCRD_PARAMETER [SIZE]=1;
      opkit.match "${C}" $(opkit.get $OK_STATE SETTINGS) && {
        opkit.set $RCRD_PARAMETER [VALUE]="${!VALUE}";
      } 
      let $POINT++ $SUBPOINT=0;
    else
      opkit.set $RCRD_PARAMETER [SIZE]=0;
      opkit.match "${C}" $(opkit.get $OK_STATE SETTINGS) && {
        opkit.match "$C" $(opkit.get $OK_STATE HAS_DEFAULT) || return 92;
      } 
    fi;
    return 0;
  }
  return 1;
}

##
##: end of file: sources/bash/source/libraries.d/opkit.sh

##: start of file: sources/bash/source/environment.d/environment.sh
##
set -e;

IFS=$' \t\n'; # do no dummy stuff

COMMAND=$(basename $0); # smart stuff is ok

TRACE='';

##
##: end of file: sources/bash/source/environment.d/environment.sh

##: start of file: sources/bash/source/environment.d/stream-signals.sh
##
RSI=${RSI:-$'\n'} # row-separator-in
RSO=${RSO:-$RSI}  # row-separator-out
CSI=${CSI:-$' \t\n'}  # col-separator-in
CSO=${CSO:-$CSI}  # col-separator-out

RES=${RES:-$'\1'}; # regular-expression-separator
REQ=${REQ:-\'}; # regular-expression-quote

RET=${RET:-''}; # regular-expression[-anchor]-tail
REH=${REH:-''}; # regular-expression[-anchor]-head

FSFS=${FSFS:-$'/'}; # file-system-file-separator
FSPS=${FSPS:-$':'}; # file-system-path-separator

##
##: end of file: sources/bash/source/environment.d/stream-signals.sh

##: start of file: sources/bash/source/environment.d/quote.sh
##
XD_QUOTE_LITERAL=\'
XD_QUOTE_ESCAPE=\\
XD_QUOTE_OUTPUT=$'\n'

##
##: end of file: sources/bash/source/environment.d/quote.sh

##: start of file: sources/bash/source/functions.d/command.sh
##
# allows the user to run a system-command as a function-target
function command() {
	builtin command "$@";
}

##
##: end of file: sources/bash/source/functions.d/command.sh

##: start of file: sources/bash/source/functions.d/line-count.sh
##
function line-count(){
	wc -l;
}

##
##: end of file: sources/bash/source/functions.d/line-count.sh

##: start of file: sources/bash/source/functions.d/table.sh
##
function columns() {
	local -i final_point="${@:$#}"
	let final_point--;
	local IFS=$CSI;
	set -- "${@:1:$# - 1}"
	local -a columns
	while read -d "$RSI" -a columns; do
		for point; do
			let point--
			(( point > ${#columns[@]} )) && return 1;
			printf "%s${CSO}" "${columns[point]}";
		done;
		(( final_point > ${#columns[@]} )) && return 1;
		printf "%s${RSO}" "${columns[final_point]}";
	done;
}

function rows() {
	local IFS="$RSI";
	local -a rows=("$@");
	local -i r=0 m=0;
	for x; do
		(( x > m )) && m=$x;
	done;
	local -a lines;
	readarray -O 1 -d "$RSI" -n $m lines;
	local -i x
	for x; do
		(( x > ${#lines[@]} )) && return 1;
		printf "%s" "${lines[$x]/$RSI/$RSO}"
	done;
}

function table() {
	rows $1 | columns $2;
}

##
##: end of file: sources/bash/source/functions.d/table.sh

##: start of file: sources/bash/source/functions.d/general.sh
##
function write-parameter-pipe() {
  printf "%s$RSO" "$@";
}

function read-parameter-pipe() {
  local lines;
  readarray lines;
  "$@" "${lines[@]%$RSI}";
}

function realpaths() {
  for arg; do printf "%s$RSO" "$(realpath "$arg")" || continue; done;
  true;
}

function parents() {
  for arg; do
    [[ $arg == / ]] && continue;
    printf "%s$RSO" "$(dirname "$arg")" || continue;
  done;
  true;
}

function names() {
  for arg; do
    [[ $arg == / ]] && continue;
    printf "%s$RSO" "$(basename "$arg")" || continue; 
  done;
  true;
}

function files() {
  for file; do [[ -d "$file" ]] && continue; [[ -e "$file" ]] && printf "%s$RSO" "$file"; done;
  true;
}

function directories() {
  for file; do 
    if [[ -d $file ]]; then printf "%s$RSO" "$file"; fi;
  done;
  true;
}

function key-within-list() { # make sure you test this result in error-mode-shells
  local key="$1"; shift;
  [[ "$1" == -- ]] || {
    echo
    echo "$COMMAND: ${FUNCNAME[1]}: error: match specifications must be preceded by \`--' for disambiguation of matches and match key"
    echo
    exit 1;
  } >&2;
  shift;
  opkit.match "$key" "$@"; 
}

##
##: end of file: sources/bash/source/functions.d/general.sh

##: start of file: sources/bash/source/functions.d/mask-match.sh
##
function mask-match() {
  subset \
    '\.' '\\.' \
    '\+' '\\+' \
    '\[' '\\[' \
    '\]' '\\]' \
    '\(' '\\(' \
    '\)' '\\)' \
    '\*' '\\*' \
    '\^' '\\^' \
    '\$' '\\$' \
    '\|' '\\|' \
    '\{' '\\{' \
    '\}' '\\}' \
    '\?' '\\?' \
    '\:' '\\:'
}

##
##: end of file: sources/bash/source/functions.d/mask-match.sh

##: start of file: sources/bash/source/functions.d/catalog.sh
##
function catalog() {
  [[ $1 =~ ^[0-9]$ ]] && {
    local -i max=$1; shift;
  }
  [[ "$1" == -- ]] || {
    echo
    echo "$COMMAND: ${FUNCNAME}: error: directory names must be preceeded by \`--' for disambiguation of options and files"
    echo
    echo $'\t'try: $COMMAND ${FUNCNAME} [NUMBER] -- DIRECTORY ...
    echo
    exit 1;
  } >&2;
  shift;
  local dir= file=
  if [[ "$d" == '' ]]; then local -i d=0; fi;
  d=$d+1;
  (( max > 0 && d > max )) && return;
  for dir; do
    for file in "${dir%/}"/*; do
      [ -e "$file" ] || [ -L "$file" ] || continue
      if [ -d "$file" ]; then
        printf "%s$RSO" "$file"
        catalog -- "$file"
      else
        printf "%s$RSO" "$file"
      fi
    done
  done;
}

##
##: end of file: sources/bash/source/functions.d/catalog.sh

##: start of file: sources/bash/source/functions.d/set-case.sh
##

function set-case() {
	[[ $1 =~ ^(flipped|upper|lower)$ ]] || {
		echo $COMMAND: ${FUNCNAME}: error: unknown case conversion: $1;
		exit 1		
	} >&2;
(
	function flipped() {
		sed -E 's/([[:lower:]])|([[:upper:]])/\U\1\L\2/g'
	}
	function upper() {
		sed -E 's/([[:lower:]])/\U\1/g'
	}
	function lower() {
		sed -E 's/([[:upper:]])/\L\1/g'
	}
	$1;
)
}

##
##: end of file: sources/bash/source/functions.d/set-case.sh

##: start of file: sources/bash/source/functions.d/links.sh
##
function links() {

  local -i include=1;
  
  [[ "$1" == -e ]] && { include=0; shift; }
  
  [[ "$1" == -- ]] || {
    echo
    echo "$COMMAND: ${FUNCNAME}: error: file specifications must be preceded by \`--' for disambiguation of files and options"
    echo
    echo $'\t'try: $COMMAND ${FUNCNAME[1]} [-e] -- FILE ...
    echo
    exit 1;
  } >&2;
  
  shift;
  
  (( include )) && {
    for file; do
      if [[ -h "$file" ]]; then 
        printf "%s$RSO" "$file";
      fi;
    done;
    return 0;
  }
  
  for file; do
    if [[ -h "$file" ]]; then continue; fi;
    printf "%s$RSO" "$file";
  done;
  
  return 0;
  
}

##
##: end of file: sources/bash/source/functions.d/links.sh

##: start of file: sources/bash/source/functions.d/filter.sh
##
BAD_FILTER_PARAMS="wrong number of parameters; expected pattern-match(es) following options"

function filter.script() {
    local flags;
    [[ "$1" == -e ]] && { # for invert match == '-e[xclude]'
      flags="-v"; shift;
    }

    [[ "$1" == -- ]] || {
      echo
      echo "$COMMAND: ${FUNCNAME[1]}: error: match specifications must be preceded by \`--' for disambiguation of matches and match options"
      echo
      exit 1;
    } >&2;
    
    shift;
    echo -n grep -E $flags;
    while (( $# )); do printf " -e ${REQ}${REH}%s${RET}${REQ}" "$1"; shift; done; 
    echo ';';
    
}

function filter() {

  (( $# == 0 )) && {
    echo
    echo "$COMMAND: $FUNCNAME: error: $BAD_FILTER_PARAMS; 0 parameters were provided"
    echo
    echo $'\t'try: $COMMAND $FUNCNAME [OPTIONS] -- MATCH-PATTERN ...
    echo
    exit 1;
  } >&2;

  source <(filter.script "$@");

}

##
##: end of file: sources/bash/source/functions.d/filter.sh

##: start of file: sources/bash/source/functions.d/subset.sh
##
BAD_SUBST_PARAMS="wrong number of parameters; expected pattern and replacement parameter-pairs following options"

function subset.script() {

  # the following parameters are paired in twos:
  # $1 find-pattern, $2 replacement[, ...]
  # this format allows you to perform successive substitutions in a reliable way.

  (( $# % 2 || $# == 0 )) && {
    echo
    echo $COMMAND: ${FUNCNAME[1]}: error: $BAD_SUBST_PARAMS: an invalid number of substitution specifications were provided.
    echo
    echo $'\t'try: $COMMAND ${FUNCNAME[1]} CUT-PATTERN PASTE-TEXT[, CUT-PATTERN PASTE-TEXT[, ...]]
    echo
    exit 1;
  } >&2;

  echo -n sed -E;
  while (( $# )); do printf " -e ${REQ}s%sg${REQ}" "${RES}${REH}${1}${RET}${RES}${2}${RES}"; shift 2; done;
  echo ';'

}

function subset() {

  local content=

  (( $# == 0 )) && {
    echo
    echo "$COMMAND: $FUNCNAME: error: $BAD_SUBST_PARAMS; 0 parameters were provided"
    echo
    echo $'\t'try: $COMMAND $FUNCNAME CUT-PATTERN PASTE-TEXT[ CUT-PATTERN PASTE-TEXT[ ...]]
    echo
    exit 1;
  } >&2;

  source <(subset.script "$@");

}

##
##: end of file: sources/bash/source/functions.d/subset.sh

##: start of file: sources/bash/source/functions.d/testing.sh
##

##
##: end of file: sources/bash/source/functions.d/testing.sh

##: start of file: sources/bash/source/shortcuts.d/environment-shortcuts.sh
##
function --get-theatre() {
  echo OPTIONS=\"${OPTIONS}\";
  echo FUNCTIONS=\"${FUNCTIONS}\";
}

function -h() {
  (( $# == 0 )) && {
    --help
  }
  REH=\^ call "${@}";
}

function trace() {
  DEBUG=1 call "$@";
}

function -q:() {
  REQ=$1 call "${@:2}";
}

function -Q:() { # this option only affects subset
  RES=$1 call "${@:2}";
}

function -t() {
  RET=\$ call "${@}";
}

function -t:() {
  RET=$1 call "${@:2}";
}

function -h:() {
  REH=$1 call "${@:2}";
}

function -z() { # reset IFS
  IFS=$' \t\n' call "$@";
}

function -z:() { # sets IFS: PARAMETER
  IFS=$1 call "${@:2}";
}

##
##: end of file: sources/bash/source/shortcuts.d/environment-shortcuts.sh

##: start of file: sources/bash/source/shortcuts.d/command-shortcuts.sh
##
function -s:() {
  [[ $1 == u ]] && {
    shift;
    call "$@" | uniq;
    return;
  }
  [[ $1 == v ]] && {
    shift;
    call "$@" | sort -V;
    return;
  }
  [[ $1 == n ]] && {
    shift;
    call "$@" | sort;
    return;
  }
  echo "$COMMAND: error: no sorting solution found for: $1";
  exit 1;
}

##
##: end of file: sources/bash/source/shortcuts.d/command-shortcuts.sh

##: start of file: sources/bash/source/shortcuts.d/function-shortcuts.sh
##
function -r() {
  call "$@" | read-parameter-pipe  realpaths;
}

function -l() {
  call "$@" | read-parameter-pipe  links --;
}

function -L() {
  call "$@" | read-parameter-pipe  links -e --;
}

function -p() {
  call "$@" | read-parameter-pipe  parents;
}

function -n() {
  call "$@" | read-parameter-pipe  names;
}

function -e:() { # runs exclusive filter; matches should be seprated by IFS[0-2]
  call "${@:2}" | filter -e -- $1;
}

function -i:() { # runs inclusive regular expression filter; matches should be seprated by IFS[0-2]
  call "${@:2}" | filter -- $1;
}

function -f() { # filters content by existing files
  call "$@" | read-parameter-pipe  files;
}

function -d() { # filters content by existing directories
  call "$@" | read-parameter-pipe  directories;
}

##
##: end of file: sources/bash/source/shortcuts.d/function-shortcuts.sh

##: start of file: sources/bash/build/options.sh
##
declare OPTIONS='
--get-theatre
-h
-q:
-Q:
-t
-t:
-h:
-z
-z:
-s:
-r
-l
-L
-p
-n
-e:
-i:
-f
-d
--help
';

##
##: end of file: sources/bash/build/options.sh

##: start of file: sources/bash/build/functions.sh
##
declare FUNCTIONS='
command
line-count
columns
rows
table
write-parameter-pipe
read-parameter-pipe
realpaths
parents
names
files
directories
key-within-list
mask-match
catalog
set-case
links
filter
subset
trace
';

##
##: end of file: sources/bash/build/functions.sh

##: start of file: sources/bash/build/help.sh
##
function --help() {

cat <<EOF

$COMMAND [OPTIONS] FUNCTION [...]

General Purpose, Mutliple Record, File, Expression and Execution: Utility

 ALL EXPRESSIONS, REGULARLY: EXTENDED.

License: MIT
GitHub: https://github.com/hypersoft/x-director

(C) 2018; Triston-Jerard: Taylor;
          Hypersoft-Systems: U.-S.-A.

GENERAL USAGE

 Flags may be combined to produce a compound option. For example:

   $COMMAND -rf catalog 1 -- .

   Lists the real path of files in the current directory.

 --help  Show this help screen
  -h     Show this help screen.

SETTINGS USAGE

 Settings may be combined with flags as a single parameter, IF: it is the last
 OPTION in the single-parameter-set. For example:

   $COMMAND -ti:\.md -f catalog 1 -- .

   Lists all .md files in the current directory.

VERBOSE ENVIRONMENT SHORTCUTS

 -t: TEXT     Sets the TAIL of all primary expressions to text.
 -h: TEXT     Sets the HEAD of all primary expressions to TEXT.

 -Q: TEXT     Sets the internal expression separator of the subset FUNCTION
              to TEXT. You may never need this option. The default is \$'\1'.
              This feature only affects the subset FUNCTION.

 -q: TEXT     Set regular-expression quoting character to TEXT for internal
              scripts. The default is \`'".

 -z: TEXT     Sets the IFS variable to TEXT. See your shell manual about IFS.

QUICK ENVIRONMENT SHORTCUTS

  -z  Set Standards Compliant IFS = \$' \t\n'.
  -t  Match the tail/type of records. Uses the RX char: \`\$'
  -h  Match the head/heading of records. Uses the RX char: \`^'

FUNCTIONS

 catalog [NUMBER] -- DIRECTORY [...]
 
   Lists the files in DIRECTOR(IES). If NUMBER is supplied, it limits the
   maximum depth of the search; where 1 means do not traverse any children of
   the DIRECTORY; 2 is children of child DIRECTORY, so on and so forth.

 columns NUMBER ...  Reads each row from stdin and prints each column NUMBER given.

 command [OPTIONS]        Runs the system command with the given options.
 
 directories FILE ...     Lists only the directories in FILE(S).
 files FILE ...           Lists only the file(s) in FILE(S).

 filter [-e] -- MATCH-PATTERN ...

  Searches through stdin line records seeking MATCH-PATTERN(S). If MATCH-PATTERN
  is found it is written to stdout unless the -e option has been specified. If
  the -e option has been specified, all matches are excluded from output.

 names FILE ...           Lists only the name parts of FILE(S).
 parents FILE ...         Lists only the parent-directories of FILE(S).

 links [-e] -- FILE ...   Lists only the links in FILE(S). With \`-e', lists
                          all files which are NOT links.

 mask-match  Reads records from stdin, masking all special matching characters.
             The result of this operation creates a plain-text-source-match-
             expression.

 read-parameter-pipe  COMMAND or FUNCTION [OPTIONS]

   Read lines from input and send them as parameters to COMMAND or FUNCTION
   with any OPTIONS.

 write-parameter-pipe  ...  Converts all parameters to line-stream-output.

 trace SOMETHING     Performs a debug trace explaining dependency chain,
                     backwards AND forwards [quantum-filters ;)].
                     
 realpaths FILE ...  List only the realpath(s) of FILE(S).

 key-within-list KEY -- VALUE ...

   Searches through VALUE(S) for KEY. Returns success if literally found. Ready
   made for read-parameter-pipe FUNCTION.

 line-count Performs line counting on stdin.

 rows NUMBER ...  Reads rows from stdin up to the maximum NUMBER given.

 set-case TYPE  Reads records from input and modifies the case according to
                TYPE. Where type is one of: flipped, upper or lower.

 subset CUT-PATTERN PASTE-TEXT[ CUT-PATTERN PASTE-TEXT[ ...]]

   Searches through stdin line records using CUT-PATTERN and replaces matches
   with PASTE-TEXT. Multiple CUT-PATTERN and PASTE-TEXT expressions may be
   supplied. Use the write-parameter-pipe FUNCTION if stdio is not convenient.

 table ROWS COLS  Reads ROWS and COLS to stdout. Each parameter is passed to
                  the row or columns FUNCTION. Such as table "1 3 2" "1 9";
                  has the meaning select rows 1, 3 and 2, print column 1 and
                  column 9.

FUNCTION SHORTCUTS

 -r  Convert path record(s) to realpath(s).
 -d  Only print existing directories.
 -f  Only print existing files.
 -p  Only print parent directories.
 -l  Only print links.
 -L  Do not print links.
 -n  Only print file names.

COMMAND SHORTCUTS

 -i: FILTER   Perform an include match against FILTER(s). Works like \`-e:'.

 -s: TYPE     Perform a sort by TYPE; where TYPE is:

               u for uniqe sort.
               v for version sort.
               n for name sort.
               
               [TYPES cannot be combined as a single parameter to \`-s:']

 -e: FILTER   Perform an exclude match against FILTER(s). Multiple filters may
              be supplied as a single parameter. The shell will expand the
              FILTERS according to IFS (see also OPTIONS: \`-z': and \`-z') for
              control of the shell expansion.

NOTE:

 (1) OPTIONS affect the output of FUNCTIONS.

 (2) OPTIONS are executed in REVERSE-ORDER of command specification; except:
     (1) when an OPTION is not a shortcut to a FUNCTION.
         (1.a) if the OPTION is not a shortcut to a FUNCTION, it is instantly
               applied THROUGH the OPTION or FUNCTION following it in the
               command specification. Which means all environment OPTIONS are
               immediately effective at the beginning of the command following
               it; being of the form: [ENVIRONMENT] OPTION OR FUNCTION.

               [see: the function definitions of the OPTIONS in source code
                     to verify the above form.
                
                  file://$(realpath $0)
               ]

 (3) CAVEAT: using the form -word:parameter, where parameter expands to an empty
     string will cause the parmater parser to grab the next available parameter.
     the only fix for this is a change of syntax. Please use -word= to avoid the
     pitfall unless you provide literal string data. The = operator does not
     apply to options which are separated from their values. Therefore the
     correct usage as mentioned here is a guranteed safeguard for the hazzard.

See: "regex - POSIX.2 regular expressions" within the Linux Programmer's Manual
     for help on expressions (\`man 7 regex').

END $COMMAND --help ##################################################################

$COMMAND [OPTIONS] FUNCTION [...]

General Purpose, Mutliple Record, File, Expression and Execution: Utility

 ALL EXPRESSIONS, REGULARLY: EXTENDED.

License: MIT
GitHub: https://github.com/hypersoft/x-director

                                           (C) 2018; Triston-Jerard: Taylor;
                                                     Hypersoft-Systems: U.-S.-A.

EOF

exit 1;

} >&2;

##
##: end of file: sources/bash/build/help.sh

##: start of file: sources/bash/source/main.sh
##

declare -A profile

function create-opkit-profile() {
  local IFS="$RSO$CSO"
  opkit.begin profile;
  local short=$(write-parameter-pipe $OPTIONS | subset '^\--?' '' ':' '' '([a-z]+-?[a-z])+' '');
	# echo $short
	opkit.set profile "[SHORT]=$(echo ${short})"

	local long=$(write-parameter-pipe $OPTIONS | subset '^-[a-zA-Z]:?' '' '^--' '' | sed /^\$/d)
	#echo $long
	opkit.set profile [LONG]="${long}"

	local settings=$(write-parameter-pipe $OPTIONS | filter -- '-[a-zA-Z]:' | subset '^-|:$' '')
	#echo $settings
	opkit.set profile [SETTINGS]="$settings"

	local has_default=$(write-parameter-pipe $short | uniq -D | uniq)
	#echo $has_default
	opkit.set profile [HAS_DEFAULT]="${has_default}"

}

function debug.dump.trace() {
{
  (( DEBUG )) || return 0;
      echo
      echo $command trace: 
      echo
      echo $'  0 '[:OUT-\>]
      echo  '  + '[compile]
      echo $'  1 'read OPTIONS left to right, for logical [dependency] order
      echo $'  + '[direction-flip: enter/exit/return]
      echo $' -1 'read right to left for output [composition] order.
      echo $'  = '[\(in function-level operations\)]
      echo $'  0 '[\<-IN: back through call chain]
      echo
      echo [OUT] $trace [IN]
      echo
    };
}

function call() {

  (( $# == 0 )) && {
    echo $COMMAND: error: invalid call: "no parameters were specified for the call with: ${trace/*<- /}";
    exit 1;
  } >&2;
  
  local name TRACE=${trace}
  [[ "$1" != trace ]] && trace+=" <- $1";

  key-within-list "$1" -- $(echo $FUNCTIONS) && debug.dump.trace

  key-within-list "$1" -- $OPTIONS $FUNCTIONS && { 
    "$@"; exit $?; 
  };
  
  declare -A operation;

  opkit.parse profile operation "$@" || {
    echo "$COMMAND parameter parse error: code: $?: parameter #${operation[POINT]} didn't parse" >&2;
    opkit.dump profile;
    echo ----------------
    opkit.dump operation;
    exit $code;
  }
  
  (( operation[BRANCH] > 5 )) && {
    local cmd="-${operation[PARAMETER]}";
    (( operation[SIZE] == 2 )) && cmd+=":";
    opkit.set profile [SUBINDEX]=0;
    if [[ -n "${operation[VALUE]}" ]]; then
      $cmd: "${operation[VALUE]}" "${@:2}"; exit $?;    
    else
      $cmd -${operation[INPUT]:2} "${@:2}"; exit $?;
    fi;
  }
  
  (( DEBUG )) && opkit.dump operation;

  {
    echo invalid command: "\`$1'";
    echo "type: $COMMAND --help or $COMMAND -h for $COMMAND help";
    exit 1;
  }  >&2;
  
}

create-opkit-profile;

call "$@";


##
##: end of file: sources/bash/source/main.sh
